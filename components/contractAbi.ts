export const PokerdAbi = [
  {
    inputs: [
      { internalType: "contract IERC20", name: "_currency", type: "address" },
      { internalType: "uint256", name: "_bigBlindPrice", type: "uint256" },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  { inputs: [], name: "BetTooSmall", type: "error" },
  {
    inputs: [{ internalType: "uint256", name: "price", type: "uint256" }],
    name: "BigBlindPriceIsTooLow",
    type: "error",
  },
  { inputs: [], name: "InvalidBetAmount", type: "error" },
  { inputs: [], name: "InvalidBuyIn", type: "error" },
  { inputs: [], name: "InvalidShowdownResults", type: "error" },
  {
    inputs: [
      {
        internalType: "enum IPokerTable.GamePhases",
        name: "current",
        type: "uint8",
      },
      {
        internalType: "enum IPokerTable.GamePhases",
        name: "required",
        type: "uint8",
      },
    ],
    name: "InvalidState",
    type: "error",
  },
  { inputs: [], name: "NotAPlayer", type: "error" },
  { inputs: [], name: "NotEnoughBalance", type: "error" },
  { inputs: [], name: "NotEnoughPlayers", type: "error" },
  { inputs: [], name: "NotTurnOfPlayer", type: "error" },
  { inputs: [], name: "OccupiedSeat", type: "error" },
  {
    inputs: [{ internalType: "address", name: "owner", type: "address" }],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "account", type: "address" }],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  { inputs: [], name: "PlayerNotInHand", type: "error" },
  { inputs: [], name: "PlayerStillPlaying", type: "error" },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  { inputs: [], name: "SkippingPhasesIsNotAllowed", type: "error" },
  { inputs: [], name: "TableIsFull", type: "error" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum IPokerTable.GamePhases",
        name: "previousPhase",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "enum IPokerTable.GamePhases",
        name: "newPhase",
        type: "uint8",
      },
    ],
    name: "PhaseChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOnTable",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "betAmount",
        type: "uint256",
      },
    ],
    name: "PlayerBet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOnTable",
        type: "uint256",
      },
    ],
    name: "PlayerFolded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "buyIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOnTable",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum IPokerTable.GamePhases",
        name: "currentPhase",
        type: "uint8",
      },
    ],
    name: "PlayerJoined",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountWithdrawn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOnTable",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum IPokerTable.GamePhases",
        name: "currentPhase",
        type: "uint8",
      },
    ],
    name: "PlayerLeft",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOnTable",
        type: "uint256",
      },
      { indexed: false, internalType: "uint256", name: "pot", type: "uint256" },
      {
        indexed: false,
        internalType: "enum IPokerTable.GamePhases",
        name: "phase",
        type: "uint8",
      },
    ],
    name: "PlayerWonWithoutShowdown",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          { internalType: "int256", name: "gains", type: "int256" },
          { internalType: "string", name: "cards", type: "string" },
        ],
        indexed: false,
        internalType: "struct IPokerTable.PlayerResult[]",
        name: "playersData",
        type: "tuple[]",
      },
      { indexed: false, internalType: "uint256", name: "pot", type: "uint256" },
      {
        indexed: false,
        internalType: "string",
        name: "communityCards",
        type: "string",
      },
    ],
    name: "ShowdownEnded",
    type: "event",
  },
  {
    inputs: [],
    name: "BIG_BLIND_PRICE",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CURRENCY",
    outputs: [{ internalType: "contract IERC20", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_BUY_IN_BB",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_PLAYERS",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_BUY_IN_BB",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PLAYER_TIMEOUT_AFTER",
    outputs: [{ internalType: "uint16", name: "", type: "uint16" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SMALL_BLIND_PRICE",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "amountToCall",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }],
    name: "bet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cancelCurrentRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "currentBettorIndex",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentPhase",
    outputs: [
      { internalType: "enum IPokerTable.GamePhases", name: "", type: "uint8" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentPot",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRoundId",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "_roundId", type: "uint256" }],
    name: "getRoundData",
    outputs: [
      {
        components: [
          { internalType: "string", name: "communityCards", type: "string" },
          {
            components: [
              { internalType: "int256", name: "gains", type: "int256" },
              { internalType: "string", name: "cards", type: "string" },
            ],
            internalType: "struct IPokerTable.PlayerResult[]",
            name: "results",
            type: "tuple[]",
          },
        ],
        internalType: "struct IPokerTable.RoundData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBettorIndex",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "isPlayerIndexInRound",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "_buyIn", type: "uint256" },
      { internalType: "uint256", name: "_indexOnTable", type: "uint256" },
    ],
    name: "joinTable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "leaveTable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "playerAmountInPot",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playerCount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playerIndexWithBigBlind",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "playerIndices",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "players",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "playersBalance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playersLeftInRoundCount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "string[]", name: "_cards", type: "string[]" },
      { internalType: "uint256[]", name: "_winners", type: "uint256[]" },
    ],
    name: "revealShowdownResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "reversePlayerIndices",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "roundData",
    outputs: [
      { internalType: "string", name: "communityCards", type: "string" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPokerTable.GamePhases",
        name: "_newPhase",
        type: "uint8",
      },
      { internalType: "string", name: "_cardsToReveal", type: "string" },
    ],
    name: "setCurrentPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "timeoutCurrentPlayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;
